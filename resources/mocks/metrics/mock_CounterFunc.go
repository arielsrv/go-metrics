// Code generated by mockery. DO NOT EDIT.

package metrics

import mock "github.com/stretchr/testify/mock"

// MockCounterFunc is an autogenerated mock type for the CounterFunc type
type MockCounterFunc struct {
	mock.Mock
}

type MockCounterFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCounterFunc) EXPECT() *MockCounterFunc_Expecter {
	return &MockCounterFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *MockCounterFunc) Execute() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockCounterFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockCounterFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockCounterFunc_Expecter) Execute() *MockCounterFunc_Execute_Call {
	return &MockCounterFunc_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockCounterFunc_Execute_Call) Run(run func()) *MockCounterFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCounterFunc_Execute_Call) Return(_a0 float64) *MockCounterFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCounterFunc_Execute_Call) RunAndReturn(run func() float64) *MockCounterFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCounterFunc creates a new instance of MockCounterFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCounterFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCounterFunc {
	mock := &MockCounterFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
