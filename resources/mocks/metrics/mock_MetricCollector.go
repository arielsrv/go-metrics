// Code generated by mockery. DO NOT EDIT.

package metrics

import (
	mock "github.com/stretchr/testify/mock"
	metrics "github.com/arielsrv/go-metric/metrics"

	time "time"
)

// MockMetricCollector is an autogenerated mock type for the MetricCollector type
type MockMetricCollector struct {
	mock.Mock
}

type MockMetricCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricCollector) EXPECT() *MockMetricCollector_Expecter {
	return &MockMetricCollector_Expecter{mock: &_m.Mock}
}

// IncrementCounter provides a mock function with given fields: metricName, tags
func (_m *MockMetricCollector) IncrementCounter(metricName string, tags ...metrics.Tags) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, metricName)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockMetricCollector_IncrementCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementCounter'
type MockMetricCollector_IncrementCounter_Call struct {
	*mock.Call
}

// IncrementCounter is a helper method to define mock.On call
//   - metricName string
//   - tags ...metrics.Tags
func (_e *MockMetricCollector_Expecter) IncrementCounter(metricName interface{}, tags ...interface{}) *MockMetricCollector_IncrementCounter_Call {
	return &MockMetricCollector_IncrementCounter_Call{Call: _e.mock.On("IncrementCounter",
		append([]interface{}{metricName}, tags...)...)}
}

func (_c *MockMetricCollector_IncrementCounter_Call) Run(run func(metricName string, tags ...metrics.Tags)) *MockMetricCollector_IncrementCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]metrics.Tags, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(metrics.Tags)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockMetricCollector_IncrementCounter_Call) Return() *MockMetricCollector_IncrementCounter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricCollector_IncrementCounter_Call) RunAndReturn(run func(string, ...metrics.Tags)) *MockMetricCollector_IncrementCounter_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementCounterFunc provides a mock function with given fields: metricName, counterFunc
func (_m *MockMetricCollector) IncrementCounterFunc(metricName string, counterFunc metrics.CounterFunc) {
	_m.Called(metricName, counterFunc)
}

// MockMetricCollector_IncrementCounterFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementCounterFunc'
type MockMetricCollector_IncrementCounterFunc_Call struct {
	*mock.Call
}

// IncrementCounterFunc is a helper method to define mock.On call
//   - metricName string
//   - counterFunc metrics.CounterFunc
func (_e *MockMetricCollector_Expecter) IncrementCounterFunc(metricName interface{}, counterFunc interface{}) *MockMetricCollector_IncrementCounterFunc_Call {
	return &MockMetricCollector_IncrementCounterFunc_Call{Call: _e.mock.On("IncrementCounterFunc", metricName, counterFunc)}
}

func (_c *MockMetricCollector_IncrementCounterFunc_Call) Run(run func(metricName string, counterFunc metrics.CounterFunc)) *MockMetricCollector_IncrementCounterFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(metrics.CounterFunc))
	})
	return _c
}

func (_c *MockMetricCollector_IncrementCounterFunc_Call) Return() *MockMetricCollector_IncrementCounterFunc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricCollector_IncrementCounterFunc_Call) RunAndReturn(run func(string, metrics.CounterFunc)) *MockMetricCollector_IncrementCounterFunc_Call {
	_c.Call.Return(run)
	return _c
}

// RecordExecutionTime provides a mock function with given fields: metricName, duration, tags
func (_m *MockMetricCollector) RecordExecutionTime(metricName string, duration time.Duration, tags ...metrics.Tags) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, metricName, duration)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockMetricCollector_RecordExecutionTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordExecutionTime'
type MockMetricCollector_RecordExecutionTime_Call struct {
	*mock.Call
}

// RecordExecutionTime is a helper method to define mock.On call
//   - metricName string
//   - duration time.Duration
//   - tags ...metrics.Tags
func (_e *MockMetricCollector_Expecter) RecordExecutionTime(metricName interface{}, duration interface{}, tags ...interface{}) *MockMetricCollector_RecordExecutionTime_Call {
	return &MockMetricCollector_RecordExecutionTime_Call{Call: _e.mock.On("RecordExecutionTime",
		append([]interface{}{metricName, duration}, tags...)...)}
}

func (_c *MockMetricCollector_RecordExecutionTime_Call) Run(run func(metricName string, duration time.Duration, tags ...metrics.Tags)) *MockMetricCollector_RecordExecutionTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]metrics.Tags, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(metrics.Tags)
			}
		}
		run(args[0].(string), args[1].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *MockMetricCollector_RecordExecutionTime_Call) Return() *MockMetricCollector_RecordExecutionTime_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricCollector_RecordExecutionTime_Call) RunAndReturn(run func(string, time.Duration, ...metrics.Tags)) *MockMetricCollector_RecordExecutionTime_Call {
	_c.Call.Return(run)
	return _c
}

// RecordValue provides a mock function with given fields: metricName, value, tags
func (_m *MockMetricCollector) RecordValue(metricName string, value float64, tags ...metrics.Tags) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, metricName, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockMetricCollector_RecordValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordValue'
type MockMetricCollector_RecordValue_Call struct {
	*mock.Call
}

// RecordValue is a helper method to define mock.On call
//   - metricName string
//   - value float64
//   - tags ...metrics.Tags
func (_e *MockMetricCollector_Expecter) RecordValue(metricName interface{}, value interface{}, tags ...interface{}) *MockMetricCollector_RecordValue_Call {
	return &MockMetricCollector_RecordValue_Call{Call: _e.mock.On("RecordValue",
		append([]interface{}{metricName, value}, tags...)...)}
}

func (_c *MockMetricCollector_RecordValue_Call) Run(run func(metricName string, value float64, tags ...metrics.Tags)) *MockMetricCollector_RecordValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]metrics.Tags, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(metrics.Tags)
			}
		}
		run(args[0].(string), args[1].(float64), variadicArgs...)
	})
	return _c
}

func (_c *MockMetricCollector_RecordValue_Call) Return() *MockMetricCollector_RecordValue_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricCollector_RecordValue_Call) RunAndReturn(run func(string, float64, ...metrics.Tags)) *MockMetricCollector_RecordValue_Call {
	_c.Call.Return(run)
	return _c
}

// RecordValueFunc provides a mock function with given fields: metricName, valueFunc
func (_m *MockMetricCollector) RecordValueFunc(metricName string, valueFunc metrics.RecordValueFunc) {
	_m.Called(metricName, valueFunc)
}

// MockMetricCollector_RecordValueFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordValueFunc'
type MockMetricCollector_RecordValueFunc_Call struct {
	*mock.Call
}

// RecordValueFunc is a helper method to define mock.On call
//   - metricName string
//   - valueFunc metrics.RecordValueFunc
func (_e *MockMetricCollector_Expecter) RecordValueFunc(metricName interface{}, valueFunc interface{}) *MockMetricCollector_RecordValueFunc_Call {
	return &MockMetricCollector_RecordValueFunc_Call{Call: _e.mock.On("RecordValueFunc", metricName, valueFunc)}
}

func (_c *MockMetricCollector_RecordValueFunc_Call) Run(run func(metricName string, valueFunc metrics.RecordValueFunc)) *MockMetricCollector_RecordValueFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(metrics.RecordValueFunc))
	})
	return _c
}

func (_c *MockMetricCollector_RecordValueFunc_Call) Return() *MockMetricCollector_RecordValueFunc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricCollector_RecordValueFunc_Call) RunAndReturn(run func(string, metrics.RecordValueFunc)) *MockMetricCollector_RecordValueFunc_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetricCollector creates a new instance of MockMetricCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricCollector {
	mock := &MockMetricCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
